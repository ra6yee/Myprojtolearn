Это класс для работы со временем и датами.
Date date=-new Date();
получаем текущее время.
Так же можно задать свою дату:

Date birthday = new Date(год, месяц, день);
Год нужно задавать от 1900.
Месяц нумеруется с нуля.

Date current = new Date(89, 2, 21);
System.out.println(current);

вывод:
Tue Mar 21 00:00:00 EET 1989

Все это достаточно просто и удобно.

Задать определенное время тоже достаточно просто: для этого нужно написать команду вида:

Date birthday = new Date(год, месяц, день, час, минуты, секунды);
Часы, минуты и секунды нумеруются с нуля: программист внутри вас должен вздохнуть спокойно.

Пример:

Date current = new Date(105, 5, 4, 12, 15, 0);
System.out.println(current);

вывод:

Sat Jun 04 12:15:00 EEST 2005
Мы задали время 12:15 и дату 4 июня 2005 года. Читается немного сложновато для не программиста, зато работает как надо.

4. Работа с фрагментами даты
Объект Date можно не просто выводить на экран. У него есть методы, которые позволяют получить отдельные фрагменты его даты:

Метод	Описание
int getYear()
                 Возвращает год даты относительно 1900 года.
int getMonth()
                 Возвращает месяц даты, месяцы нумеруются с нуля
int getDate()
                 Возвращает день месяца
int getDay()
                 Возвращает день недели
int getHours()
                 Возвращает часы
int getMinutes()
                 Возвращает минуты
int getSeconds()
                 Возвращает секунды
Пример:

Код	Вывод на экран	Примечание
Date current = new Date(105, 5, 4, 12, 15, 0);
System.out.println(current.getYear());
System.out.println(current.getMonth());
System.out.println(current.getDate());
System.out.println(current.getDay());


Кстати, у объекта Date отдельные фрагменты даты можно не только получать, но и изменять:

Метод	Описание
void setYear(int year)	             Меняет год даты. Год задаётся относительно 1900 года.
void setMonth(int month)	         Меняет месяц даты, месяцы нумеруются с нуля
void setDate(int date)	             Меняет день месяца
void setHours(int hours)	         Меняет часы
void setMinutes(int minutes)	     Меняет минуты
void setSeconds(int seconds)	     Меняет секунды

5. Миллисекунды

Как мы уже говорили, внутри объекта Date хранится количество миллисекунд, прошедшее с 1 января 1970 года.

Если оно нам нужно, мы можем получить его у объекта Date:

long time = date.getTime();

                            Метод getTime() возвращает количество миллисекунд, которое хранится внутри объекта Date.

Вы можете не просто получить количество миллисекунд, но и изменить его в существующем объекте:

Date date = new Date();
date.setTime(1117876500000L);
Кстати, можно записать эту конструкцию короче, передав время в объект Date прямо во время его создания:

Date date = new Date(1117876500000L);




Если вы хотите сравнить две даты и узнать, какая из них была раньше, для этого есть три способа

Способ первый — просто сравнить количество миллисекунд, которое в них хранится:

if (date1.getTime() < date2.getTime())
Способ второй — использовать метод before() объекта Date:

if (date1.before(date2))
Читается это так: если date1 перед date2, то...

Способ третий — использовать метод after() объекта Date:

if (date2.after(date1))
 Читается это так: если date2 после date1, то...

Метод Date.parse
Класс Date умеет делать еще одну интересную и полезную вещь: получать дату из текстовой строки. Или как говорят программисты, парсить строку.

Для этого у него есть специальный метод — parse(). Выглядит процесс парсинга так:

Date date = new Date();
date.setTime( Date.parse("Jul 06 12:15:00 2019") );
Кстати, этот же код можно записать более компактно:

Date date = new Date("Jul 06 12:15:00 2019");



