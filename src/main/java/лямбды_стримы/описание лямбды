Чтобы понимать, что такое лямбда-функции, сначала нужно понимать, что такое интерфейсы.
 Поэтому напомним основные момменты.

Интерфейс — это разновидность класса. Сильно урезанная, если можно так сказать.
 У интерфейса, в отличие от класса, не может быть своих переменных (кроме статических).
 Также нельзя создавать объекты типа Интерфейс:

Нельзя объявлять переменные класса
Нельзя создавать объекты
Пример:

interface Runnable
{
   void run();
}
В общем чтобы не писать анонимные классы, можно использовать лямбду. Тоесть если брать в пример класс компаратор,
который и используеся часто для манипуляций с коллекциями, то вместо такого:

Comparator<String> comparator = new Comparator<String>()
{
    public int compare (String obj1, String obj2)
    {
        return obj1.length() – obj2.length();
    }
};

можно делать так:
Comparator<String> comparator = (String obj1, String obj2) ->
{
    return obj1.length() – obj2.length();
};
Точка с запятой нужна, т.к. у вас тут не только скрытое объявление класса, но и создание переменной.

Такая запись называется лямбда-выражением.

Если компилятор встретит такую запись в вашем коде, он просто сгенерирует по ней полную версию кода
(с анонимным внутренним классом).

Обратите внимание: при записи лямбда-выражения мы опустили не только имя класса Comparator<String>,
 но и имя метода int compare().

У компилятора не возникнет проблем с определением метода, т.к. лямбда-выражение можно писать только для интерфейсов,
у которых метод один. Впрочем есть способ обойти это правило, но об этом вы узнаете,
 когда начнете изучать ООП активнее (мы говорим о default-методах).

Comparator<String> comparator = (String obj1, String obj2) ->
 {
    return obj1.length() – obj2.length();
 };
 Collections.sort(list, comparator);
 Или даже так:

 Collections.sort(list, (String obj1, String obj2) ->
    {
       return obj1.length() – obj2.length();
    }
 );
 Мы просто подставили вместо переменной comparator сразу то значение, которое присваивали переменной comparator.

 Выведение типов

 Но и это еще не все. Код в этих примерах можно записать еще короче.
  Во-первых, компилятор может сам определить, что у переменных obj1 и obj2 тип String.
   А во-вторых, фигурные скобки и оператор return тоже можно не писать, если у вас в коде метода всего одна команда.

 Сокращенный вариант будет таким:

 Comparator<String> comparator = (obj1, obj2) ->
    obj1.length() – obj2.length();

 Collections.sort(list, comparator);
А если вместо переменной comparator сразу подставить ее значение, то получим такой вариант:

Collections.sort(list, (obj1, obj2) ->  obj1.length() — obj2.length() );
Ну и как вам: всего одна строка кода, никакой лишней информации — только переменные и код. Короче уже некуда! Или есть куда?

Лямбда-выражение можно записать там, где используется тип-интерфейс с одним-единственным методом.

Например, в этом коде Collections.sort(list, (obj1, obj2) -> obj1.length() — obj2.length());
можно записать лямбда-выражение, т.к. сигнатура метода sort() имеет вид:

sort(Collection<T> colls, Comparator<T> comp)
Когда мы передали в метод sort в качестве первого параметра коллекцию ArrayList<String>,
компилятор смог определить тип второго параметра как Comparator<String>.
 А из этого сделал вывод, что этот интерфейс имеет единственный метод int compare(String obj1, String obj2).
 Остальное уже дело техники.

А причем тут интерфейсы?
Дело в том, что лямбду можно повесить только на интерфейс с одним методом. Функциональный интерфейс.

Люямбды призваны заменить анонимные классы, чтобы не писать много кода (хотя весь анонимный код за нас подставляет сама
 среда разработки).

3. Конструктор
Ссылки на методы с помощью двойного двоеточия очень удобно использовать,
когда мы будем работать с потоками ввода-вывода. Вы в этом убедитесь чуть позже

А пока давайте поговорим о 3 популярных способах передачи ссылки на метод:

Ссылка на метод объекта

Чтобы передать ссылку на метод объекта, нужно записать код вида объект::метод.
Этот код эквивалентен коду x -> объект.метод(x).

В качестве объекта могут фигурировать такие специальные переменные как this и super.

Ссылка на метод класса

Чтобы передать ссылку на статический метод, нужно записать код вида класс::метод. Этот код будет преобразован к коду вида x -> класс.метод(x);

Ссылка на конструктор

Конструктор по своему поведению чем-то похож на статический метод класса, поэтому на него тоже можно передать ссылку. Выглядит это так: класс::new.

Например, можно обойти стирание типов у коллекций и передать в метод toArray() ссылку на конструктор, который создаст нужный массив: toArray( int[]::new );



