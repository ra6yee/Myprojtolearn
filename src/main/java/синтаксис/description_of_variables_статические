 Переменные-ссылки – это переменные всех типов, кроме примитивных. Такие переменные содержат в себе только адрес объекта
  (ссылку на объект).
— Переменные примитивных типов хранят в себе значения, а переменные типов-классов хранят ссылку на объекты
этого же класса, ну или хранят null.Объект и ссылка на него связаны, примерно, как человек и его телефонный номер.
 Телефонный номер не является человеком, но номер можно использовать, чтобы звонить человеку, спрашивать у
  него какую-то информацию, руководить им или давать команды.
 Ссылка тоже используется для взаимодействия с объектом. Все объекты взаимодействуют друг с другом при помощи ссылок.
 При присваивании примитивного объекта, его значение копируется (дублируется). При присваивании же ссылочной переменной,
 копируется только адрес объекта (телефонный номер), сам же объект при этом не копируется.
Ссылка даёт ещё одно преимущество: можно передать ссылку на объект в какой-нибудь метод, и этот метод будет в состоянии
модифицировать (изменять) наш объект используя ссылку на него, вызывая его методы и обращаясь к данным внутри объекта.


1. Переменная, объявленная в методе, существует/видна с начала объявления до конца метода.

2. Переменная, объявленная в блоке кода, существует до конца этого блока кода.

3. Переменные — аргументы метода — существуют до конца выхода из метода.

4. Переменные класса/объекта существуют все время жизни содержащего их объекта.
 Их видимость регулируется специальными модификаторами доступа.

5. Статические переменные классов существуют все время работы программы.
 Их видимость также определяется модификаторами доступа.

 class Main
 {
     public int count = 0;     //объявили переменную класса

     public void run()
     {
         count = 15;           //обращение к переменной класса
         int count = 10;       //объявили локальную переменную метода
         count++;             //обращение к переменной метода
     }
 }
 — В этом коде объявлены две переменных count. В строке 3 объявлена переменная класса, а в строке 8 – переменная метода.

 — Когда метод run будет исполняться, то произойдет вот что:

 — В строке 7 мы обращаемся к переменной класса и присваиваем ей значение 15

 — В строке 8 объявляется (создается) новая переменная метода – count. Она закрывает собой переменную класса.
  Любой дальнейший код в методе будет видеть (обращаться) именно к переменной метода.

 — Понятно.

 — Переменная метода закрывает собой переменную класса. Т.е. обращение будет происходить к переменной метода.
  Но к переменной класса тоже можно обратиться, только более сложным способом.



  1. Если переменная помечена словом "static", то она общая для всех объектов, что будут созданы.
  (Что-то вроде общей ячейки в банке, из которой все могут брать что-то, и все могут туда класть что-то).
  2. Обращение к переменной метода внутри метода - просто ее имя.
  3. Обращение к переменной класса внутри метода может быть двух видов:
  * Если переменная класса НЕСТАТИЧЕСКАЯ - используем конструкцию this.переменная
  * Если переменная класса СТАТИЧЕСКАЯ - вызываем через имя класса - ClassName.переменная

  class Solution26 {
      public static void main(String[] args) {
          Person person = new Person();
          System.out.println("Age is: " + person.age);
          person.adjustAge(person.age);
          System.out.println("Adjusted age is: " + person.age);
      }

      public static class Person {
          public int age = 20;

          public void adjustAge(int age) {
              this.age = age + 20;//тут идет обращение к нестатической переменной класса Person, поэтому использхуется this
              System.out.println("Age in adjustAge() is: " + age);

          }
      }
  }


class Solution27 {
    public static void main(String[] args) {
        Apple apple = new Apple();
        apple.addPrice(50);
        Apple apple2 = new Apple();
        apple2.addPrice(100);
        System.out.println("Стоимость яблок " + Apple.applesPrice);
    }

    public static class Apple {
        public static int applesPrice = 0;

        public static void addPrice(int applesPrice) {
           Apple.applesPrice+=applesPrice; //так как переменная статическая, то обращение к ней идет по имени класса
                                            // в котором она расположена.И она одна для всего класса.

        }
    }
}







— Статические же переменные – существуют в одном экземпляре, и обращаться к ним нужно по имени класса
(внутри класса к статической переменной можно обращаться просто по имени):

Объявление класса
class Cat                   //класс
{
    String name;            //обычная переменная
    static int catCount;    //статическая переменная

    Cat(String name)
    {
        this.name = name;
        Cat.catCount++;   //увеличиваем значение статический переменной на 1
    }
}
Код в методе main:
System.out.println(Cat.catCount);
Cat cat1 = new Cat("Vaska");

System.out.println(Cat.catCount);
Cat cat2 = new Cat("Murka");

System.out.println(cat1.name);
System.out.println(cat2.name);
System.out.println(Cat.catCount);
Вывод на экран будет таким:
0
1
Vaska
Murka
2
— Это тоже понятно.

— Методы класса тоже делятся на две категории.
Обычные методы вызываются у объекта и имеют доступ к данным этого объекта.
 Статические методы не имеют такого доступа – у них просто нет ссылки на объект,
  они способны обращаться либо к статическим переменным этого класса либо к другим статическим методам.

— Статические методы не могут обращаться к нестатическим методам или нестатическим переменным!

— А почему?

— Каждая обычная переменная класса находится внутри объекта.
 Обратиться к ней можно только имея ссылку на этот объект. В статический метод такая ссылка не передается.

— А в обычные методы передается?

— Да, в обычные методы передается, неявно.
В каждый метод неявно передается ссылка на объект, у которого этот метод вызывают.
 Переменная, которая хранит эту ссылку, называется this.
 Таким образом, метод всегда может получить данные из своего объекта или вызвать другой нестатический метод этого же объекта.

— В статический метод вместо ссылки на объект передается null.
 Поэтому он не может обращаться к нестатическим переменным и методам – у него банально нет ссылки на объект,
  к которому они привязаны.

— Ясно.

— Так работают обычные нестатические методы:

Как выглядит код
Cat cat = new Cat();
String name = cat.getName();
cat.setAge(17);
cat.setChildren(cat1, cat2, cat3);
Что происходит на самом деле
Cat cat = new Cat();
String name = Cat.getName(cat);
Cat.setAge(cat, 17);
Cat.setChildren(cat, cat1, cat2, cat3);
При вызове метода в виде «объект» точка «имя метода», на самом деле вызывается метод класса,
 в который первым аргументом передаётся тот самый объект. Внутри метода он получает имя this.
  Именно с ним и его данными происходят все действия.
— А вот как работают статические методы:

Как выглядит код
Cat cat1 = new Cat();
Cat cat2 = new Cat();
int catCount = Cat.getAllCatsCount();
Что происходит на самом деле
Cat cat1 = new Cat();
Cat cat2 = new Cat();
int catCount = Cat.getAllCatsCount(null);
При вызове статического метода, никакого объекта внутрь не передаётся.
Т.е. this равен null, поэтому статический метод не имеет доступа к нестатическим переменным и методам
 (ему нечего неявно передать в обычные методы).
— Переменная или метод являются статическими, если перед ними стоит ключевое слово static.
— А зачем такие методы нужны, если они так сильно ограничены?
— У такого подхода тоже есть свои преимущества.
— Во-первых, для того, чтобы обратиться к статическим методам и переменным не надо передавать никакую ссылку на объект.
— Во-вторых, иногда бывает нужно, чтобы переменная была в единственном экземпляре. Как, например, переменная System.out
 (статическая переменная out класса System).
— И в третьих, иногда нужно вызвать метод, еще до того, как будет возможность создавать какие-то объекты
— Это когда же?
— А почему, по-твоему, метод main объявлен статическим?
 Чтобы его можно было вызвать сразу после загрузки класса в память.
 Еще до того, когда можно будет создавать какие-то объекты.

 public static class Constants {
        public static String WANT_STRING = "Я хочу ездить на ";
        public static String LUXURIOUS_CAR = "роскошной машине";
        public static String CHEAP_CAR = "дешевой машине";
        public static String FERRARI_NAME = "Феррари";
        public static String LANOS_NAME = "Ланосе";
    }

