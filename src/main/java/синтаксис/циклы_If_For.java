package синтаксис;
/*
Их называют управляющими конструкциями.
Циклы — это разновидность управляющих конструкций для организации многократного выполнения
 одного и того же участка кода. Код внутри такой управляющей конструкции выполняется
 циклично. Каждое выполнение кода — это итерация цикла.
  Количество итераций регулируется условием цикла.
   Код, который выполняется внутри цикла, называют телом цикла.

Циклы с предусловием: условие выполнения определяется перед первой итерацией.

Циклы с постусловием: условие выполнения определяется после первой итерации
 (поэтому они всегда выполняются минимум один раз).
  Полезны, когда нужно выполнять некое действие, пока не реализуется некое условие:
   например, считывать ввод пользователя, пока он не введет слово “stop”.

Циклы со счетчиком: количество итераций определяется смоделированным счетчиком.
 В условии цикла задается его начальное и конечное значение.
  Каждую итерацию счетчик наращивается.
   Мы можем заранее определить количество итераций.
   Эти циклы бывают полезны, когда нужно перебрать все элементы в какой-то коллекции.
    Циклы со счетчиком называют “циклами для...”. “Для каждого элемента некоторой
    коллекции осуществить следующие действия”.
     Допустимы случаи, когда выполнение цикла можно прервать до достижения его условия.
      Например, если у нас есть коллекция из 100 чисел и нам необходимо понять,
       содержит ли она отрицательные числа. Мы можем начать перебор всех чисел,
        используя цикл “для”. Но когда мы найдем первое отрицательное число,
         нам не обязательно перебирать оставшиеся числа.
          Мы можем прервать выполнение цикла, если его дальнейшее выполнение не имеет
           смысла. Подобные ситуации называют прерыванием цикла.

Безусловные циклы — циклы, которые выполняются бесконечно.
 Например: “Пока 1=1, печатать “1=1””. Такая программа будет выполняться,
  пока ее вручную не прервут.
  Данные циклы тоже бывают полезны, когда используются вместе с прерыванием цикла “изнутри”
 . Используйте их осторожно, чтобы не спровоцировать зависание программы.
Используя while, можно создать бесконечный цикл:

        while(true)

    {
        // тело цикла
    }

что бы его прервать используется команда  break

Структура do.. while выглядит так:

do {
     statement(s)
} while (expression);

десь:
expression — условие цикла, выражение, которое должно возвращать boolean значение.
statement(s) — тело цикла (одна или более строк кода).
В отличие от while, значение expression будет вычисляться после каждой итерации.
 Если результатом выражения будет true, в очередной раз выполнится тело цикла — statement(s)
  (как минимум раз).


Цикл for

for (initialization; termination; increment) {
    statement(s)
}

Здесь:
initialization — выражение, которое инициализирует выполнение цикла.
Исполняется только раз в начале цикла.
Чаще всего в данном выражении инициализируют счетчик цикла
termination — boolean выражение, которое регулирует окончание выполнения цикла.
 Если результат выражения будет равен false, цикл for прервется.
increment — выражение, которое исполняется после каждой итерации цикла.
 Чаще всего в данном выражении происходит инкрементирование или декрементирование переменной счетчика.
statement(s) — тело цикла.
Выражения initialization, termination, increment опциональны. Если опустить каждое из них, мы получим бесконечный цикл:

бесконечный цикл
for ( ; ; ) {
    // код тела цикла
}

Цикл for each
Этот цикл Java — разновидность цикла for для итерации коллекций и массивов.

Структура for each выглядит так:

for (Type var : vars) {
    statement(s)
}

Здесь:
vars — переменная, существующий список или массив
Type var — определение новой переменной того же типа (Type), что и коллекция vars.
 Данную конструкцию можно прочитать так: “Для каждого var из vars сделать...”.

 */
public class циклы_If_For {
    public static void main(String[] args) {
        // цикл while, работает пока выполняется условие.В данном случае countDown >= 0.
        // состоит из:
        // while (expression) {
        //     statement(s)
        //}
        int countDown = 10;
        while (countDown >= 0) {
            System.out.println("До старта: " + countDown);
            countDown--;
        }

        System.out.println("Поехали !");
    }


    //    Используя while, можно создать бесконечный цикл:

     //   while(true)

    {
        // тело цикла
    }

    //  Чтобы прервать выполнение цикла, используется оператор break.

    //  Например:
}
                class WhileExample {
            public static void main(String[] args) {

                int count = 1;
                while (true) {
                    System.out.println("Строка №" + count);
                    if (count > 3) {
                        break;
                    }
                    count++; // Без наращивания цикл будет выполняться вечно
                }

            }
        }


class DoWhileExample {
    public static void main(String[] args) {
        int count = 1;
        do {
            System.out.println("count = " + count);
            count ++;
        } while (count < 11);
    //Если результатом выражения будет true,
        // в очередной раз выполнится тело цикла — statement(s) (как минимум раз).

    }
}

class ForExample {

    public static void main(String[] args) {
        for (int i = 1; i < 6; i++) {
            System.out.println("Строка №" + i);
        }
    }
}
class ForExample1 {
//разновидность цикла for для итерации коллекций и массивов.
    public static void main(String[] args) {
        String[] daysOfWeek =
                { "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье" };


        for (String dayOfWeek : daysOfWeek) {
            System.out.println(dayOfWeek);
        }
////////////////////////////////////////////////
         int a=0,b=8;

        if (a < b)
            System.out.println("А меньше Б");
        else
            System.out.println("Б не больше А");
//////////////////////////////////////////////////////

        if (a < b)
        {
            System.out.println("А меньше Б");
            System.out.println("Б больше А");
        }
        else
        {
            System.out.println("Б не больше А");
            System.out.println("А не меньше Б");
        }
 //////////////////////////////////////////////////////
    }
}
