package синтаксис;



public class тернарный_оператор {
    /*
     тернарный оператор.

С его помощью мы можем упростить нашу проверку до одной строки кода:
*/
    public static class Man {
        int age;

        public int getAge() {
            return age;
        }

        public Man(int a) {
            this.age = a;
        }
    }

    public static void main(String[] args) {

        Man man = new Man(22);

        String securityAnswer = man.getAge() >= 18 ? "Все в порядке, проходите!" : "Этот фильм не подходит для вашего возраста!";

        System.out.println(securityAnswer);

    }
}
/*
Так и выглядит работа этого оператора. Тернарным (тройным) его называют потому, что в его работе
 принимают участие 3 компонента:
Одно условие (man.getAge() >= 18)
Два возможных результата ("Все в порядке, проходите!" и "Этот фильм не подходит для вашего возраста!")
Вначале в коде записывается условие, после которого ставится вопросительный знак.

man.getAge() >= 18 ?

“Возраст человека больше или равно 18?”

Далее следует первый результат. Он срабатывает в случае, если условие возвращает true, то есть является истинным:

String securityAnswer = man.getAge() >= 18 ? "Все в порядке, проходите!"

Возраст человека больше или равно 18? Если да — присвоить переменной securityAnswer значение "Все в порядке, проходите!".

Далее следует оператор “:” , после которого записывается второй результат. Он срабатывает в случае,
если условие возвращает false, то есть является ложным:

String securityAnswer = man.getAge() >= 18 ? "Все в порядке, проходите!" : "Этот фильм не подходит для вашего возраста!";


Возраст человека больше или равно 18? Если да — присвоить переменной securityAnswer значение "Все в порядке, проходите!".
 Если нет — присвоить переменной securityAnswer значение "Этот фильм не подходит для вашего возраста!"

Вот так и выглядит общая логика тернарного оператора.

условие ? результат 1 : результат 2
Тернарный оператор  - 2Кстати, скобки вокруг условия ставить не обязательно: мы сделали это для большей читаемости.
Сработает и без них:
(x < y) ? -1 : ((x == y) ? 0 : 1)  можно устроить вложенные тернарные операторы
*/