package синтаксис;

/*
— Самые простые операторы сравнения ты уже знаешь – это меньше (<) и больше (>).
— Так же есть «равно»(==) и «не равно»(!=). А еще «меньше либо равно»(<=) и «больше либо равно»(>=).
— Обрати внимание, что операторов «=<» и «=>» в Java нет!
— Знак «=» используется для операции присваивания, поэтому для равенства используют «==» — два знака равно.
 Для того, чтобы проверить, что переменные не равны, используют «!=»
 При сравнении двух переменных в Java с использованием оператора «==»,
  происходит сравнение того, что эти переменные в себе содержат.
— Т.е. для переменных примитивных типов происходит сравнение значений.

— Для переменных ссылочных типов происходит сравнение ссылок. Т.е. если объекты идентичны внутри,
 но ссылки на них разные, сравнение покажет, что они неравны: результатом сравнения будет false(ложь).
  Сравнение ссылок будет true(истина), только если обе ссылки указывают на один и тот же объект.

— Для сравнения объектов можно использовать специальный метод equals().
 Этот метод (и все методы класса Object) добавляется компилятором в твой класс, даже если ты их не объявляешь.



 */


public class операторы_сравнения {

    public class Cat{
        String name;

        public Cat(String name) {
            this.name = name;
        }
    }

    //Происходит сравнение примитивных типов.
    // На экран будет выведено true.

    {
        int a = 5;
        int b = 5;

        System.out.println(a == b);
    }

//Происходит сравнение ссылок.
//На экран будет выведено true.
//Обе переменных хранят ссылки на один и тот же объект.

    {Cat cat1 = new Cat("Vaska");
        Cat cat2 = cat1;
        System.out.println(cat1 == cat2);}

//Происходит сравнение ссылок.
//На экран будет выведено true.
//Обе переменных хранят ссылки на один и тот же объект.


        {String s = new String("Mama");
        String s2 = s;
        System.out.println(s == s2);}

//Происходит сравнение ссылок.
//На экран будет выведено false.
//Переменные хранят ссылки на два идентичных объекта Cat, но не на один и тот же.



        {Cat cat1 = new Cat("Vaska");
        Cat cat2 = new Cat("Vaska");
        System.out.println(cat1 == cat2);}

//Происходит сравнение ссылок.
//На экран будет выведено false.
//Переменные хранят ссылки на два идентичных объекта String, но не на один и тот же.

    {String s = new String("Mama");
        String s2 = new String("Mama");
        System.out.println(s == s2);}

//Происходит сравнение объектов.
//Если в классе Cat не переопределен метод equals(), на экран будет выведено false.
//Переменные хранят ссылки на два идентичных объекта Cat, но не на один и тот же.

   {Cat cat1 = new Cat("Vaska");
        Cat cat2 = new Cat("Vaska");
        System.out.println(cat1.equals(cat2));}

//Происходит сравнение объектов.
//На экран будет выведено true.
//Переменные хранят ссылки на два идентичных объекта String.

    {String s = new String("Mama");
        String s2 = new String("Mama");
        System.out.println(s.equals(s2));}
}
