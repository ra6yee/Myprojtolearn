Многопоточность это введение в программу дополнительные множественные одновременные незавивсимые части исполнительного
кода. Например, одна нить ждет данные от пользователя, процессор простаивает, тогда другая нить в это время знанимает
процессор и ,например, подготавливает объект для сериализации или еще чего-то.
Вещь удобная, но и проблемная, злоупотреблять ей не стоит.

А вот как все это работает глубоко внутри.
Т.к. процессор у компьютера один, то он может выполнять только одну команду одновременно.
Поэтому происходит вот что: процессор постоянно переключается между нитями.
Переключился на новую нить, выполнил несколько ее команд, затем переключился на следующую нить,
выполнил несколько ее команд и так далее.
Но т.к. переключение между нитями происходит сотни раз в секунду, со стороны кажется, что все нити работают одновременно.

Чтобы породить новую нить нужно:

1) Создать объект класса Thread (нить)

2) Передать в него метод, который нужно выполнить

3) Вызвать у созданного объекта Thread метод start.

Маленькие программы на Java обычно состоят из одной нити, называемой «главной нитью» (main thread).
Но программы побольше часто запускают дополнительные нити, их еще называют «дочерними нитями».
 Главная нить выполняет метод main и завершается.
 Аналогом такого метода main, для дочерних нитей служит метод run интерфейса Runnable.

 — Чтобы указать, с какого именно метода нужно начать выполнение объекту Thread,
  нужно как-то передать метод этому объекту. В Java это реализовано с помощью интерфейса Runnable.
  Этот интерфейс содержит единственный абстрактный метод – void run().
  Класс Thread имеет конструктор Thread(Runnable runnable)
  в который можно передать любой объект, который реализует интерфейс Runnable.

 Ты должен унаследовать свой класс от интерфейса Runnable, затем переопределить метод run в своем классе.
  Именно с вызова этого метода начнется работа новой нити. В методе run ты можешь написать все, что хочешь.







