Паттерн проектирования «Обёртка» (Wrapper или Decorator) – это довольно простой и удобный механизм расширения
функциональности объектов.
можно им закрыть доступ к оригинальному объекту или, наоборот, добавить объекту дополнительную функциональность.

Пусть у нас есть класс Cat с двумя методами getName и setName:

class Cat
{
 private String name;
 public Cat(String name)
 {
  this.name = name;
 }
 public String getName()
 {
  return this.name;
 }
 public void setName(String name)
 {
  this.name = name;
 }
}
	Класс Кот(Cat) имеет два метода: getName & setName


	public static void main(String[] args)
    {
     Cat cat = new Cat("Васька");

     printName(cat);
    }

    public static void printName(Сat cat)
    {
     System.out.println(cat.getName());
    }

    В консоль будет выведена строка «Васька».

Допустим нам нужно перехватить вызов методов у объекта cat и, возможно, внести туда небольшие изменения.
 Для этого нам понадобится обернуть его в свой класс-обертку.



Если мы хотим «обернуть» вызовы методов какого-то объекта своим кодом, то нам нужно:

1) Создать свой класс-обертку и унаследоваться от класса/интерфейса, для которого делаем обертку.

2) Передать оборачиваемый объект в конструктор нашего класса.

3) Переопределить все методы в нашем новом классе, и вызвать в них методы оборачиваемого объекта.

4) Внести свои изменения «по вкусу»: менять результаты вызовов, параметры или делать что-то еще.



class CatWrapper extends Cat
{
 private Cat original;
 public CatWrapper (Cat cat)
 {
  super(cat.getName());
  this.original = cat;
 }

 public String getName()
 {
  return "Кот по имени " + original.getName();
 }

 public void setName(String name)
 {
  original.setName(name);
 }
}

Класс-обертка. Класс не хранит никаких данных, кроме ссылки на оригинальный объект.
Класс в состоянии «пробрасывать» вызовы оригинальному объекту (setName), переданному ему в конструкторе.
А также «перехватывать» эти вызовы и модифицировать их параметры и результаты.

public static void main(String[] args)
{
 Cat cat = new Cat("Васька ");
 Cat catWrap = new CatWrapper (cat);
 printName(catWrap);
}

public static void printName(Cat named)
{
 System.out.println(named.getName());
}

В консоль будет выведена строка
«Кот по имени Васька».

Нда.Как то туманно.Нет понятно что это за структура, но все же есть вопросы о целесообразности.

«суть задачи - на практике понять, как делать обертку.
вот 4 основные правила:
1) унаследоваться от того же интерфейса, что и оригинал;
2) создать переменную класса типа этого интерфейса (это называется композиция)
3) в конструкторе ее инициализировать;
4) реализовать интерфейс, вызывая в методе аналогичный метод оригинала (это называется делегирование) с добавлением
дополнительного функционала (суть обертки)» ©





