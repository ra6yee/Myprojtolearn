try-with-resources
Поэтому в Java 7 этот подход решили сделать официальным, и вот что из этого вышло:

try(InputStream is = new FileInputStream("c:/file.txt"))
{
 is.read(…);
}
Это специальная конструкция try, называемая try-with-resources (так же как и второй for для коллекций называется foreach).

Обрати внимание – после try следуют круглые скобки, где объявляются переменные и создаются объекты. Эти объекты можно
использовать внутри блока try, обозначенного скобками {}. Когда выполнение команд блока try закончится, независимо
от того – нормально оно закончилось или было исключение,
для объекта, созданного внутри круглых скобок (), будет вызван метод close();

— А если мне нужно вызвать другой метод при выходе из блока try, где мне его указать?

— Тут все немного тоньше. В Java 7 появился такой интерфейс:

public interface AutoCloseable
{
 void close() throws Exception;
}
Ты можешь унаследовать свой класс от такого интерфейса. И тогда его объекты можно будет использовать внутри
try-with-resources. Только объекты такого типа можно использовать внутри круглых скобок try-with-resources для
«автоматического закрытия».

— Т.е. мне нужно будет переопределить метод close и написать в нем код по «очистке» моего объекта, а указать другой
метод нельзя?

— Ага. Зато можно указывать несколько объектов, разделив их точкой с запятой:

try(
InputStream is = new FileInputStream("c:/file.txt");
OutputStream os = new FileOutputStream("c:/output.txt")
)
{
 is.read(…);
 os.write(…);
}



