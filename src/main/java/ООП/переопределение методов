class Cat
{
 public String getName()
 {
   return "Васька";
 }
}


interface HasName
{
 String getName();
 int getWeight();
}


class Tiger extends Cat implements HasName
{
 public int getWeight()
 {
  return 115;
 }

}

Допустим, имеется такой код.Если создать объект класса Tiger и переопределить метод getName, то непонятно какой именно
метод отработается.
Если ты просто реализуешь все недостающие методы, которые тебе подскажет Intellij IDEA,
то можешь потом долго искать ошибку.

Оказывается, что в классе Tiger есть унаследованный от Cat метод getName,
который и будет считаться реализацией метода getName для интерфейса HasName.
А метод интерфейса повиснет в воздухе и будет давать ошики в работе программы.

 Это не очень плохо, это скорее потенциальное место для ошибок.

Но может быть еще хуже:

Код
interface HasWeight
{
 int getValue();
}


interface HasSize
{
 int getValue();
}



class Tiger extends Cat implements HasWeight, HasSize
{
 public int getValue()
 {
  return 115;
 }
}
 и какой из getValue реализуется тут???? Из какого именно интерфейса???Вопрос...

 Оказывается, ты не всегда можешь унаследоваться от нескольких интерфейсов.
 Вернее унаследоваться можешь, а вот корректно их реализовать – нет.
 Посмотри на пример, оба интерфейса требуют чтобы ты реализовал метод getValue()
  и не ясно что он должен возвращать: вес(weight) или размер(size).
 Это довольно-таки неприятная вещь, если тебе придется с ней столкнуться.
 Но есть и приятные новости.

 Расширение видимости. При переопределении типа разрешается расширить видимость метода.

Сужение типа результата.

В переопределенном методе мы можем поменять тип результата, сузив его.
class Cat
{
 public Cat parent;

 public Cat getMyParent()
 {
  return this.parent;

 }

 public void setMyParent(Cat cat)
 {
  this.parent = cat;
 }

}
class Tiger extends Cat
{
 public Tiger getMyParent()
 {
  return (Tiger) this.parent;
 }
}
Мы переопределили метод getMyParent, теперь он возвращает объект типа Tiger.
public static void main(String[] args)
{
 Cat parent = new Cat();

 Cat me = new Cat();
 me.setMyParent(parent);
 Cat myParent = me.getMyParent();
}
Все отлично. Тут мы даже не знаем, что в классе наследнике тип результата метода getMyParent был сужен.
«Старый код» как работал так и работает.

public static void main(String[] args)
{
 Tiger parent = new Tiger();

 Tiger me = new Tiger();
 me.setMyParent(parent);
 Tiger myParent = me.getMyParent();
}
Тут вызывается метод, у которого сузили тип результата.
Если бы этого сделать было нельзя, всегда можно было бы объявить метод в Tiger:
public Tiger getMyTigerParent()
{
return (Tiger) this.parent;
}

Т.е. ни о каком нарушении безопасности и/или контроля приведения типов нет речи.
public static void main(String[] args)
{
 Tiger parent = new Tiger();

 Cat me = new Tiger();
 me.setMyParent(parent);
 Cat myParent = me.getMyParent();
}

	И тут все отлично работает, хотя мы расширили тип переменных до базового класса (Cat).
Нет ничего страшного при вызове метода getMyParent, т.к. его результат, хоть и класса Tiger,
все равно сможет отлично присвоиться в переменную myParent базового класса (Cat).

Объекты Tiger можно смело хранить как в переменных класса Tiger, так и в переменных класса Cat.

— Ага. Я понял. Надо при переопределении методов беспокоиться о том, как все это будет работать,
если мы передадим наши объекты в код, который умеет обращаться только с базовым классом, и ничего о нашем классе не знает.

— Именно! Тогда вопрос на засыпку, почему нельзя расширить тип результата при переопределении метода?

— Это же очевидно, тогда перестанет работать код в базовом классе:

Пояснение проблемы
class Cat
{
 public Cat parent;
 public Cat getMyParent()
 {
  return this.parent;
 }
 public void setMyParent(Cat cat)
 {
  this.parent = cat;
 }
}
class Tiger extends Cat
{
 public Object getMyParent()
 {
  if (this.parent != null)
   return this.parent;
  else
   return "я - сирота";
 }
}
Мы переопределили метод getMyParent и расширили тип его результата.
Тут все отлично.

public static void main(String[] args)
{
 Tiger parent = new Tiger();

 Cat me = new Tiger();
 Cat myParent = me.getMyParent();
}

Тогда у нас перестанет работать этот код.
Метод getMyParent может вернуть любой объект типа Object, т.к. на самом деле он вызывается у объекта типа Tiger.

А у нас нет проверки перед присваиванием.
Тогда вполне возможно, что переменная myParent типа Cat будет хранить ссылку на строку.

В Java перед вызовом метода не проверяется, есть ли такой метод у объекта или нет. Все проверки происходят во время
выполнения. И [гипотетический] вызов отсутствующего метода, скорее всего, приведет к тому
 что программа начнет выполнять байт-код там где его нет.
Это, в конце концов, приведет к фатальной ошибке и операционная система принудительно закроет программу.

