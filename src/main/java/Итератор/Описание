TreeSet<String> set = new TreeSet<String>();
Iterator<String> iterator = set.iterator();

while (iterator.hasNext())
{
 String item = iterator.next();
 System.out.println(item);
}

TreeSet<String> set = new TreeSet<String>();

for(String item : set)
{
 System.out.println(item);
}

Цикл for-each можно использовать для любых объектов, которые поддерживают итератор. Т.е. ты можешь написать свой класс,
добавить ему метод iterator() и сможешь использовать его объекты в правой части конструкции for-each.

популярная разновидность итераторов, для которой даже придумали свой интерфейс. Речь идет об итераторе для списков – ListIterator.

Списки, независимо от реализации, обладают порядком элементов, что в свою очередь позволяет работать с ними через итератор чуть более удобно.

Вот какие методы есть у интерфейса ListIterator<E>:

Метод	Описание
boolean hasNext()	Проверяет, есть ли еще элементы впереди.
E next()	Возвращает следующий элемент.
int nextIndex()	Возвращает индекс следующего элемента
void set(E e)	Меняет значение текущего элемента
boolean hasPrevious()	Проверяет, есть ли элементы позади.
E previous()	Возвращает предыдущий элемент
int previousIndex()	Возвращает индекс предыдущего элемента
void remove()	Удаляет текущий элемент
void add(E e)	Добавляет элемент в список.
Т.е. тут мы можем ходить не только вперед, но и назад. И еще пара фич по мелочи.

— Что ж, интересная штука. А где его используют?

— Например, ты хочешь двигаться туда-обратно по связному списку. При этом операция get будет довольно медленной, а операция next() очень быстрой.

— Хм. Убедила. Буду иметь ввиду.

Спасибо, Элли!




