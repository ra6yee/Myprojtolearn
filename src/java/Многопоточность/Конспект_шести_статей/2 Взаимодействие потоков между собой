yield лишь передаёт некоторую рекомендацию планировщику потоков Java, что данному потоку можно дать меньше времени
исполнения. Но что будет на самом деле, услышит ли планировщик рекомендацию и что вообще он будет делать — зависит от
реализации JVM и операционной системы. А может и ещё от каких-то других факторов.
Вся путаница сложилась, скорее всего, из-за переосмысления многопоточности в процессе развития языка Java.

Sleep - Засыпание потока
Поток в процессе своего выполнения может засыпать. Это самой простой тип взаимодействия с другими потоками.
В операционной системе, на которой установлена виртуальная Java машина, где выполняется Java код, есть свой планировщик
потоков, называемый Thread Scheduler. Именно он решает, какой поток когда запускать.

class HelloWorldApp {
    public static void main(String []args) {
        Runnable task = () -> {
            try {
                int secToWait = 1000 * 60;
                Thread.currentThread().sleep(secToWait);
                System.out.println("Waked up");
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        };
        Thread thread = new Thread(task);
        thread.start();
    }
}

try {
	TimeUnit.SECONDS.sleep(60);
	System.out.println("Waked up");
} catch (InterruptedException e) {
	e.printStackTrace();
}




Thread.interrupt
Это прерывание потока
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! флаг isInterrupted
public static void main(String []args) {
	Runnable task = () -> {
		try {
			TimeUnit.SECONDS.sleep(60);
		} catch (InterruptedException e) {
			System.out.println("Interrupted");
		}
	};
	Thread thread = new Thread(task);
	thread.start();
	!!!!!!!!!!!!!!!! thread.interrupt();!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}
В этом примере мы не будем ждать 60 секунд, а сразу напечатаем 'Interrupted'. Всё потому, что мы вызвали у потока метод
interrupt. Данный метод выставляет "internal flag called interrupt status".
 То есть у каждого потока есть внутренний флаг, недоступный напрямую. Но у нас есть native методы для взаимодействия с
 этим флагом.

Но это не единственный способ. Поток может быть в процессе выполнения, не ждать чего-то, а просто выполнять действия.
Но может предусмотреть, что его захотят завершить в определённый момент его работы. Например:

public static void main(String []args) {
	Runnable task = () -> {
		while(!Thread.currentThread().isInterrupted()) {
			//Do some work
		}
		System.out.println("Finished");
	};
	Thread thread = new Thread(task);
	thread.start();
	thread.interrupt();
}

В примере выше видно, что цикл while будет выполняться до тех пор, пока поток не прервут снаружи.

Про флаг isInterrupted важно знать то, что если мы поймали InterruptedException, флаг isInterrupted сбрасывается и
тогда isInterrupted будет возвращать false. Есть также статический метод у класса Thread, который относится только к
текущему потоку — Thread.interrupted(), но данный метод сбрасывает значение флага на false!

Join — Ожидание завершения другого потока
Самым простым типом ожидания является ожидание завершения другого потока.

public static void main(String []args) throws InterruptedException {
	Runnable task = () -> {
		try {
			TimeUnit.SECONDS.sleep(5);
		} catch (InterruptedException e) {
			System.out.println("Interrupted");
		}
	};
	Thread thread = new Thread(task);
	thread.start();
	thread.join();
	System.out.println("Finished");
}

В данном примере новый поток будет спать 5 секунд. В то же время, главный поток main будет ждать, пока спящий поток не
 проснётся и не завершит свою работу.

 Метод join довольно прост, потому что является просто методом с java кодом, который выполняет wait, пока поток, на
 котором он вызван, живёт. Как только поток умирает (при завершении), ожидание прерывается. Вот и вся магия метода join.

WAIT
У Thread есть ещё один метод ожидания, который при этом связан с монитором. В отличие от sleep и join, его нельзя просто
 так вызвать. И зовут его wait.

Выполняется метод wait на объекте, на мониторе которого мы хотим выполнить ожидание. Посмотрим пример:

public static void main(String []args) throws InterruptedException {
	    Object lock = new Object();
	    // task будет ждать, пока его не оповестят через lock
	    Runnable task = () -> {
	        synchronized(lock) {
	            try {
	                lock.wait();
	            } catch(InterruptedException e) {
	                System.out.println("interrupted");
	            }
	        }
	        // После оповещения нас мы будем ждать, пока сможем взять лок
	        System.out.println("thread");
	    };
	    Thread taskThread = new Thread(task);
	    taskThread.start();
        // Ждём и после этого забираем себе лок, оповещаем и отдаём лок
	    Thread.currentThread().sleep(3000);
	    System.out.println("main");
	    synchronized(lock) {
	        lock.notify();
	    }
Чтобы разобраться, как это работает, следует вспомнить, что методы wait и notify относятся к java.lang.Object. Кажется
странным, что методы, относящиеся к потокам, находятся в классе Object. Но тут то и кроется ответ.

Как мы помним, каждый объект в Java имеет заголовок. В заголовке содержится различная служебная информация, в том числе
и информация о мониторе — данные о состоянии блокировки. И как мы помним, каждый объект (т.е. каждый instance) имеет
ассоциацию с внутренней сущностью JVM, называемой локом (intrinsic lock), который так же называют монитором.

В примере выше в задаче task описано, что мы входим в блок синхронизации по монитору, ассоциированному с lock. Если
удаётся получить лок по этому монитору, то выполняется wait. Поток, выполняющий этот task, будет освобождать монитор
lock, но становиться в очередь потоков, ожидающих уведомления по монитору lock. Эта очередь потоков называется WAIT-SET,
 что более правильно отражает суть. Это скорее набор, а не очередь.

Поток main создаёт новый поток с задачей task, запускает его и ждёт 3 секунды. Это позволяет с большой долей вероятности
 новому потоку захватить лок прежде, чем поток main, и встать в очередь по монитору. После чего поток main сам входит в
 блок синхронизации по lock и выполняет уведомление потока по монитору. После того, как уведомление отправлено, поток
 main освобождает монитор lock,
а новый поток (который ранее ждал) дождавшись освобождения монитора lock, продолжает выполнение.

Существует возможность отправить уведомление только одному из потоков (notify) или сразу всем потокам из очереди
(notifyAll).



