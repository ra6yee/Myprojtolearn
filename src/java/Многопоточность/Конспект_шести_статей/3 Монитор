
В многопоточности есть такое понятие, как Monitor. Вообще, слово монитор с латинского переводится как "надзиратель" или
 "надсмотрщик".

 Получается, что для целей синхронизации между потоками Java использует некий механизм, который называется "Монитор".
 С каждым объектом ассоциирован некоторый монитор, а потоки могут его заблокировать "lock" или разблокировать "unlock".

В данном туториале говорится, что синхронизация в Java построена вокруг внутренней сущности (internal entity), известной
 как intrinsic lock или monitor lock. Часто такой лок называют просто "монитор".
Также мы опять видим, что каждый объект в Java имеет ассоциированный с ним intrinsic lock

 У каждого объекта в Java есть заголовок (header) — своего рода внутренние метаданные, которые недоступны программисту
 из кода, но которые нужны виртуальной машине, чтобы работать с объектами правильно.

В состав заголовка объекта входит MarkWord.

Итак, в Java с объектом ассоциирован монитор и поток получается заблокировать этот поток или ещё говорят "получить лок".
 Самый простой пример:

public class HelloWorld{
    public static void main(String []args){
        Object object = new Object();
        synchronized(object) {
            System.out.println("Hello World");
        }
    }
}

Итак, при помощи ключевого слова synchronized текущий поток (в котором выполняются эти строки кода) пытается
использовать монитор, ассоциированный с объектом object и "получить лок" или "захватить монитор"
(второй вариант даже предпочтетельнее).
 Если за монитор нет соперничества (т.е. никто больше не хочет выполнить synchronized по такому же объекту), Java может
 попытаться выполнить оптимизацию, называемую "biased locking". В заголовке объекта в Mark Word выставится
 соответствующий тэг и запись о том, к какому потоку привязан монитор. Это позволяет сократить накладные расходы при
 захватывании монитора.

Если монитор уже ранее был привязан к другому потоку, тогда такой блокировки недостаточно. JVM переключается на
 следующий тип блокировки — basic locking. Она использует compare-and-swap (CAS) операции. При этом в заголовке в
 Mark Word уже хранится не сам Mark Word, а ссылка на его хранение + изменяется тэг, чтобы JVM поняла, что у нас
  используется базовая блокировка.

Если же возникает соперничество (contention) за монитор нескольких потоков (один захватил монитор, а второй ждёт
освобождение монитора), тогда тэг в Mark Word меняется, и в Mark Word начинает храниться ссылка уже на монитор как
объект — некоторую внутреннюю сущность JVM. Как сказано в JEP, в таком случае требуется место в Native Heap области
памяти на хранение этой сущности. Ссылка на место хранения этой внутренней сущности и будет находиться в Mark Word
объекта.

Таким образом, как мы видим, монитор — это действительно механизм обеспечения синхронизации доступа нескольких потоков к
 общим ресурсам. Существует несколько реализаций этого механизма, между которыми переключается JVM. Поэтому для простоты,
  говоря про монитор, мы говорим на самом деле про локи.







