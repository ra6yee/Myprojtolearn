/*
Создателям Java не сильно нравилась текущая ситуация с классами Date и Calendar. Они были хороши в свое время, но
времена меняются. И нужно было что-то простое, мощное и надежное. И вот вместе с выходом Java8 (15 лет спустя после
выхода Calendar) был представлен Java Date Time API: набор классов, которые должны решить все возможные проблемы со
временем.

Классов было так много, что их решили разнести по нескольким пакетам:

Пакет java.time — базовый пакет для Java Date Time API: в нем содержатся такие классы как LocalDate, LocalTime,
LocalDateTime, Instant, Period, Duration. Все объекты этих классов — immutable: их нельзя изменить после создания.

Пакет java.time.format содержит в себе классы для форматирования времени: преобразования времени (и даты) в текстовую
строку и обратно. Например, в нем содержится такой универсальный класс как DateTimeFormatter,
 который пришел на смену SimpleDateFormat.

Пакет java.time.zone содержит классы для работы с часовыми поясами (time zones). Он содержит такие классы как TimeZone
 и ZonedDateTime. Если вы пишете код для сервера, клиенты которого находятся в разных частях света, эти классы вам
 очень понадобятся.
/*
                                   LocalDate

Первый и самый полезный класс из Date Time API, который мы изучим — это класс LocalDate. Как вы, скорее всего,
догадываетесь по его названию, этот класс создан для работы с датой.

Объекты этого класса не изменяются после создания (класс LocalDate immutable). Зато это добавило классу простоты и
надежности. Особенно если с объектом класса одновременно взаимодействуют несколько нитей (потоков исполнения).

Чтобы создать новый объект класса LocalDate, нужно использовать один из статических методов. Вот список основных.

Получение текущей даты

Чтобы получить текущую дату, нужно воспользоваться статическим методом now(). Это гораздо проще, чем кажется:

LocalDate today = LocalDate.now();
Где today — это переменная класса LocalDate, а LocalDate.now() — вызов статического метода now() у класса LocalDate.

Пример:

Код	Вывод на экран
LocalDate today = LocalDate.now();
System.out.println("Сегодня = " + today);

Сегодня = 2019-02-22
Получение даты в определенном часовом поясе

Также у класса LocalDate есть разновидность метода now(ZoneId), который позволяет получить текущую дату в определенном
часовом поясе.

Для этого нам понадобится еще один класс — ZoneId (java.time.ZoneId). У него есть метод of(), который возвращает объект
 ZoneId по имени часового пояса.

Чтобы определить текущую дату в Шанхае, нужно написать код:

Код	Вывод на экран
ZoneId  timezone = ZoneId.of("Asia/Shanghai");
LocalDate today = LocalDate.now(timezone);
System.out.println("Сейчас в Шанхае = " + today);


Сейчас в Шанхае = 2019-02-22
Список имен всех часовых поясов (time zone) можно найти в интернете.

3. Получение конкретной даты
Чтобы получить объект LocalDate, содержащий определенную дату, нужно воспользоваться статическим методом of().
Выглядит все тоже очень просто и понятно:

LocalDate date = LocalDate.of(2019, Month.FEBRUARY, 22);
Где date — это переменная класса LocalDate, а LocalDate.of() — вызов статического метода of() у класса LocalDate.

Также тут мы видим использование специальной константы FEBRUARY класса Month (java.time.Month) для задания месяца
Февраль.

Можно задать месяц и по старинке — с помощью числа:

LocalDate date = LocalDate.of(2019, 2, 22);
Двойка? Вместо месяца Февраль? Это что, месяцы теперь опять нумеруются с единицы?

Да, наконец-то спустя почти 20 лет после создания Java месяцы перестали нумеровать с нуля.

Пример:

Код	Вывод на экран
LocalDate today = LocalDate.of(2019, 2, 22);
System.out.println("Сегодня = " + today);

Сегодня = 2019-02-22
Получение даты по номеру дня

Есть еще один любопытный метод создания даты: с помощью метода ofYearDay можно получить дату, имея только номер года и
номер дня года. Общий вид такой:

LocalDate date = LocalDate.ofYearDay(год, день);
Где год — это номер года, а день — номер дня в году.

Пример:

Код	Вывод на экран
LocalDate today = LocalDate.ofYearDay(2019, 100);
System.out.println("Сегодня = " + today);

Сегодня = 2019-04-10
Сотый день в 2019 году — это 10 апреля.

Получение даты Unix

Помните, что объекты класса Date всегда хранили время в миллисекундах с 1 января 1970 года? Чтобы программисты не
 скучали по старым добрым временам, в класс LocalDate добавили метод ofEpochDay(), который возвращает дату,
 отсчитанную от 1 января 1970 года. Общий вид такой:

LocalDate date = LocalDate.ofEpochDay(день);
Где день — это количество дней, прошедшее с 1 января 1970 года.

Пример:

Код	Вывод на экран
LocalDate today = LocalDate.ofEpochDay(1);
System.out.println("Сегодня = " + today);

Сегодня = 1970-01-02
4. Получение фрагментов даты
Изменять объекты класса LocalDate нельзя, а вот получать отдельные фрагменты даты еще как можно. Для этого у объектов
класса LocalDate есть несколько методов:

Метод	Описание
int getYear()
                   Возвращает год из конкретной даты
Month getMonth()
                    Возвращает месяц даты — одну из специальных констант
                                 JANUARY, FEBRUARY, ...;
int getMonthValue()
                         Возвращает номер месяца из даты. Январь == 1.
int getDayOfMonth()
                                Возвращает номер дня в месяце
int getDayOfYear()
                                    Возвращает номер дня с начала года
DayOfWeek getDayOfWeek()
                                       Возвращает день недели: оду из специальных констант
                                         MONDAY, TUESDAY, ...;
IsoEra getEra()
                                             Возвращает эру: константа BC (Before Current Era) и CE(Current Era)
Пример:

Код	Вывод на экран
LocalDate today = LocalDate.now();
System.out.println(today.getYear());
System.out.println(today.getMonth());
System.out.println(today.getMonthValue());
System.out.println(today.getDayOfMonth());
System.out.println(today.getDayOfWeek());

2019 FEBRUARY 2 22 FRIDAY


5. Изменение даты в объекте LocalDate
Класс LocalDate содержит несколько методов, которые позволяют работать с датой. Эти методы реализованы по аналогии с
методами класса String: каждый из этих методов не меняет существующий объект LocalDate, а возвращает новый с
нужными данными.

Вот какие методы есть у класса LocalDate:

plusDays(int days)
                     Добавляет определенное количество дней к дате
plusWeeks(int weeks)
                      Добавляет недели к дате
plusMonths(int months)
                        Добавляет месяцы к дате
plusYears(int years)
                       Добавляет годы к дате
minusDays(int days)
                                       Отнимает дни от даты
minusWeeks(int weeks)
                            Отнимает недели от даты
minusMonths(int months)
                            Отнимает месяцы от даты
minusYears(int years)
                              Отнимает годы от даты
Пример:

Код	Вывод на экран
LocalDate birthday = LocalDate.of(2019, 2, 28);
LocalDate nextBirthday = birthday.plusYears(1);
LocalDate firstBirthday = birthday.minusYears(30);

System.out.println(birthday);
System.out.println(nextBirthday);
System.out.println(firstBirthday);




2019-02-28
2020-02-28
1989-02-28
Объект birthday, чьи методы мы вызываем, не меняется. Вместо этого его методы возвращают новые объекты, которые и
содержат нужные данные.

                                          LocalTime

   Класс LocalTime создан для случаев, когда нужно работать только со временем без даты. Например, вы пишете
   приложение-будильник. Время для вас важно, а дата — нет.

   Класс LocalTime очень похож на класс LocalDate: его объекты тоже нельзя изменять после создания.

   Чтобы создать новый объект класса LocalTime, нужно воспользоваться статическим методом now().
   Пример:

   LocalTime time = LocalTime.now();
   Где time — это переменная класса LocalTime, а LocalTime.now() — вызов статического метода now() у класса LocalTime.

   Пример:


   LocalTime time = LocalTime.now();
   System.out.println("Сейчас = " + time);

   Сейчас = 09:13:13.642881600
   После точки указывается текущее значение наносекунд.

   2. Получение заданного времени
   Чтобы получить заданное время, нужно воспользоваться статическим методом of(). Пример:

   LocalTime time = LocalTime.of(часы, минуты, секунды, наносекунды);
   В который можно передать соответственно часы, минуты, секунды и наносекунды.

   Пример:

   LocalTime time = LocalTime.of(12, 15, 0, 100);
   System.out.println("Сейчас = " + time);
   Сейчас = 12:15:00.000000100
   Есть, кстати, еще две модификации этого метода:

   LocalTime time = LocalTime.of(часы, минуты, секунды);
   И

   LocalTime time = LocalTime.of(часы, минуты);
   Так что можете пользоваться каким вам удобнее.

   Получение времени по номеру секунды

   Также можно получить время по номеру секунды в сутках: для этого есть специальный статический метод ofSecondOfDay():

   LocalTime time = LocalTime.ofSecondOfDay(секунды);
   Где секунды — это количество секунд, прошедшее с начала суток.

   Пример:

   LocalTime time = LocalTime.ofSecondOfDay(10000);
   System.out.println(time);

   02:46:40

   Да,10 тысяч секунд — это чуть меньше трех часов. Все верно.

   3. Получение фрагментов времени
   Чтобы из объекта LocalTime получить значение определенного элемента времени, используют специальные методы:


   int getHour()
   Возвращает часы
   int getMinute()
   Возвращает минуты
   int getSecond()
   Возвращает секунды
   int getNano()
   Возвращает наносекунды
   Пример:

   Код	Вывод на экран
   LocalTime now = LocalTime.now();
   System.out.println(now.getHour());                  2
   System.out.println(now.getMinute());                46
   System.out.println(now.getSecond());                40
   System.out.println(now.getNano());                  0

   4. Изменение времени в объекте класса LocalTime
   Класс LocalTime также содержит методы, которые позволяют работать со временем. Эти методы реализованы по аналогии с
   методами класса LocalDate: каждый из них не меняет существующий объект LocalTime, а возвращает новый с нужными данными.

   Вот какие методы есть у класса LocalTime:


   plusHours(int hours)
   Добавляет часы
   plusMinutes(int minutes)
   Добавляет минуты
   plusSeconds(int seconds)
   Добавляет секунды
   plusNanos(int nanos)
   Добавляет наносекунды
   minusHours(int hours)
   Вычитает часы
   minusMinutes(int minutes)
   Вычитает минуты
   minusSeconds(int seconds)
   Вычитает секунды
   minusNanos(int nanos)
   Вычитает наносекунды
   Пример:

   Код	Вывод на экран
   LocalTime time = LocalTime.now();
   LocalTime time2 = time.plusHours(2);
   LocalTime time3 = time.minusMinutes(40);
   LocalTime time4 = time.plusSeconds(3600);

   System.out.println(time);
   System.out.println(time2);
   System.out.println(time3);
   System.out.println(time4);
    10:33:55.978012200
   12:33:55.978012200
   09:53:55.978012200
   11:33:55.978012200
   Обратите внимание, что каждый раз мы получаем новое время относительно первого объекта time. Если добавить ко времени
    3600 секунд, это будет ровно 1 час.

                                       LocalDateTime
     Класс LocalDateTime объединяет в себе возможности классов LocalDate и LocalTime: он хранит и дату, и время.
      Его объекты тоже неизменяемые, и его методы также аналогичны методам классов LocalDate и LocalTime.

     Получение текущего момента: дата и время

     Тут все в пределах ожиданий: тоже используется метод now(). Пример:

     Код	Вывод на экран
     LocalDateTime time = LocalDateTime.now();
     System.out.println("Сейчас = " + time);

     Сейчас = 2019-02-22T09:49:19.275039200
     При выводе на экран дата и время разделяются буквой T.

     Получение определенного момента: дата и время

     Все ожидаемо аналогично классам LocalDate и LocalTime — используется метод of():

     ... = LocalDateTime.of(год, месяц, день, часы, минуты, секунды);
     Сначала идут параметры, которые задают дату в тех же форматах, что и в классе LocalDate. Затем идут параметры,
     задающие время в тех же форматах, что и в классе LocalTime. Список всех вариаций метода of() приведен ниже:

     Методы
     of (int year, int month, int day, int hour, int minute)
     of (int year, int month, int day, int hour, int minute, int second)
     of (int year, int month, int day, int hour, int minute, int second, int nano)
     of (int year, Month month, int day, int hour, int minute)
     of (int year, Month month, int day, int hour, int minute, int second)
     of (int year, Month month, int day, int hour, int minute, int second, int nano)
     of (LocalDate date, LocalTime time)
     Можно задать дату явно или через объекты LocalDate и LocalTime:

     Код
     LocalDate date = LocalDate.now();
     LocalTime time = LocalTime.now();
     LocalDateTime current = LocalDateTime.of(date, time);
     System.out.println("Сейчас = " + current);

     LocalDateTime date = LocalDateTime.of(2019, Month.MAY, 15, 12, 15, 00);
     System.out.println("Сейчас = " + date);
     Вывод на экран
     Сейчас = 2019-02-22T10:05:38.465675100
     Сейчас = 2019-05-15T12:15
     У класса LocalDateTime есть методы получения фрагмента даты и/или времени. Они абсолютно аналогичны методам
     классов LocalDate и LocalTime. Дублировать их тут мы не будем.



                                                     Класс Instant




     В Date Time API добавили класс Instant для работы со временем, нацеленным на процессы внутри компьютеров.
     Вместо часов, минут и секунд, он оперирует секундами, миллисекундами и наносекундами.

     Этот класс хранит в себе два поля:

     количество секунд, прошедшее с 1 января 1970 года
     количество наносекунд
     Класс создан для разработчиков? Да. Поэтому он опять считает время в Unix-time: от начала 1970 года.

     Можно даже сказать, что класс Instant — это упрощенная версия класса Date: оставили только то, что нужно программистам.

     Получить объект Instant можно точно так же, как объект LocalTime:

     Instant timestamp = Instant.now();
     Где timestamp — это переменная класса Instant, а Instant.now() — вызов статического метода now() у класса Instant.

     Пример:

     Код	Вывод на экран
     Instant timestamp = Instant.now();
     System.out.println(timestamp);

     2019-02-22T08:42:42.234945300Z
     Также можно создать новый объект с помощью разновидностей метода of(), если передать в него время, прошедшее с 1 января 1970 года:

     ofEpochMilli(long milliseconds)
     Нужно передать количество миллисекунд
     ofEpochSecond(long seconds)
     Нужно передать количество секунд
     ofEpochSecond(long seconds, long nanos)
     Нужно передать секунды и наносекунды
     Методы объектов Instant

     У класса Instant есть два метода, которые возвращают его значения:

     long getEpochSecond()
     Количество секунд, прошедшее с 1 января 1970 года
     int getNano()
     Наносекунды.
     long toEpochMilli()
     Количество миллисекунд, прошедшее с 1 января 1970 года
     Также есть методы, которые способны создавать новые объекты Instant на основе уже существующего:

     Instant plusSeconds(long)
     Добавляет секунды к текущему моменту времени
     Instant plusMillis(long)
     Добавляет миллисекунды
     Instant plusNanos(long)
     Добавляет наносекунды
     Instant minusSeconds(long)
     Вычитает секунды
     Instant minusMillis(long)
     Вычитает миллисекунды
     Instant minusNanos(long)
     Вычитает наносекунды
     Примеры:


     Instant timestamp = Instant.now();
     System.out.println(timestamp);

     long n = timestamp.toEpochMilli();
     Instant time = Instant.ofEpochMilli(n);
     System.out.println(time);

     2019-02-22T09:01:20.535344Z



     2019-02-22T09:01:20.535Z

                                     ZonedDateTime

      Есть еще один очень интересный класс в Date Time API — класс ZonedDateTime. Основное его назначение — удобно
       работать с датами в разных часовых поясах.

      LocalDate отлично подходит для описания дат. Например, дня рождения: у меня день рождения 15 марта независимо от
      того, где я нахожусь. Это пример даты.

      LocalTime отлично подходит для описания времени, например, будильника: я завел будильник на 5 утра и все равно,
      где я нахожусь. 5 утра — это 5 утра. Это пример работы с временем.

      А теперь допустим, что мы пишем приложение, которое бронирует авиабилеты. Самолеты взлетают и прилетают по
      местному времени, самолет летит фиксированное время, но часовые пояса меняются.

      Временные зоны
 /////////////////////////////////////////////////////////////////////////////////////////////////////////////
      Кстати, с временными зонами (часовыми поясами) в мире настоящий бардак. Более того, если вы думаете, что часовых поясов 24, вы сильно ошибаетесь.

      Например, время в Индии отличается от Гринвича на 5 c половиной часов: GMT+5:30. Одни страны переходят на летнее время, другие нет. Причем разные страны переходят на летнее время в разное время года.

      А некоторые страны с помощью законов отменяют переход на летнее время, или снова вводят, или опять отменяют.

      В общем, в мире есть временные зоны, внутри каждой зоны одно время. Время в разных зонах может совпадать в определенные периоды года, а в другие периоды отличаться. Зоны обычно называют по крупным городам, находящимся в них: Europe/Monaco, Asia/Singapore, хотя бывают и исключения — US/Pacific.

      Всего в настоящий момент официально известно 599 временных зон. Вдумайтесь: 599. Это совсем не 24. Добро пожаловать в глобальный мир.
     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      Для хранения временной зоны в Java используется класс ZoneId из пакета java.time.

      Кстати, у него есть статический метод getAvailableZoneIds(), который возвращает множество всех известных на
      текущий момент временных зон. Чтобы получить список всех зон, нужно написать такой код:

      Код	Вывод на экран (часть)
      for (String s: ZoneId.getAvailableZoneIds())
         System.out.println(s);
      Asia/Aden
      America/Cuiaba
      Etc/GMT+9
      Etc/GMT+8
      Чтобы получить объект ZoneId по его имени, нужно воспользоваться статическим методом of();

      Код	Примечание
      ZoneId zone = ZoneId.of("Africa/Cairo");
      Каир
      2. Создание объекта ZonedDateTime
      При создании объекта ZonedDateTime нужно вызвать у него статический метод now() и передать в него объект ZoneId.

      Код	Вывод на экран
      ZoneId zone = ZoneId.of("Africa/Cairo");
      ZonedDateTime time = ZonedDateTime.now(zone);
      System.out.println(time);


      2019-02-22T11:37:58.074816+02:00[Africa/Cairo]
      Если в метод now() не передать объект ZoneId, а так можно, временная зона будет определена автоматически:
       на основе настроек компьютера, на котором выполняется программа.

      Пример:

      Код	Вывод на экран
      ZonedDateTime time = ZonedDateTime.now();
      System.out.println(time);

      2019-02-22T13:39:05.70842+02:00[Europe/Helsinki]
      Преобразование глобальной даты в локальную

      Одной из интересных особенностей ZonedDateTime является возможность его преобразования в локальную дату и время.
       Пример.

      ZoneId zone = ZoneId.of("Africa/Cairo");
      ZonedDateTime cairoTime = ZonedDateTime.now(zone);

      LocalDate localDate = cairoTime.toLocalDate();
      LocalTime localTime = cairoTime.toLocalTime();
      LocalDateTime localDateTime = cairoTime.toLocalDateTime();
      3. Работа со временем
      Как и у класса LocalDateTime, у класса ZonedDateTime есть много способов получить отдельные фрагменты даты и
      времени. Вот список этих методов:

      int getYear()
      Возвращает год из конкретной даты
      Month getMonth()
      Возвращает месяц даты: одну из специальных констант JANUARY, FEBRUARY, ...;
      int getMonthValue()
      Возвращает номер месяца из даты. Январь == 1
      int getDayOfMonth()
      Возвращает номер дня в месяце
      DayOfWeek getDayOfWeek()
      Возвращает день недели: одну из специальных констант MONDAY, TUESDAY, ...;
      int getDayOfYear()
      Возвращает номер дня в году
      int getHour()
      Возвращает часы
      int getMinute()
      Возвращает минуты
      int getSecond()
      Возвращает секунды
      int getNano()
      Возвращает наносекунды


      Все методы полностью аналогичны методам LocalDateTime. И, конечно, у класса ZonedDateTime есть методы, которые
      позволяют работать с датой и временем. При этом объект, у которого вызываются методы, не меняется: вместо этого
       методы возвращают новый объект ZonedDateTime:


      plusYears(int)
      Добавляет годы к дате
      plusMonths(int)
      Добавляет месяцы к дате
      plusDays(int)
      Добавляет дни к дате
      plusHours(int)
      Добавляет часы
      plusMinutes(int)
      Добавляет минуты
      plusSeconds(int)
      Добавляет секунды
      plusNanos(int)
      Добавляет наносекунды
      minusYears(int)
      Отнимает годы от даты
      minusMonths(int)
      Отнимает месяцы от даты
      minusDays(int)
      Отнимает дни от даты
      minusHours(int)
      Вычитает часы
      minusMinutes(int)
      Вычитает минуты
      minusSeconds(int)
      Вычитает секунды
      minusNanos(int)
      Вычитает наносекунды

                                                     DateTimeFormatter

      В Date Time API был добавлен специальный класс DateTimeFormatter. Его цель — по максимуму облегчить преобразование
       даты и времени именно в тот формат, который нужен программисту. И можно сказать, что создателям Java это удалось.

      Пользоваться им очень просто. Сначала нужно создать объект класса DateTimeFormatter и передать в него шаблон,
       по которому будут отображаться дата и время:

      DateTimeFormatter dtf = DateTimeFormatter.ofPattern(шаблон);
      Где dtf — это переменная типа DateTimeFormatter. DateTimeFormatter.ofPattern() — это статический метод класса
      DateTimeFormatter. А шаблон — это строка, которая задает шаблон, по которому будут отображаться дата и время.

      Примеры

      Код	Вывод на экран
      DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM-dd-yy");
      String text = dtf.format( LocalDateTime.now() );
      System.out.println(text);

      02-22-19

      В примере выше мы с помощью метода ofPattern() создаем объект DateTimeFormatter на основе строки-шаблона.
      А в следующей строке с помощью метода format() преобразовываем объект типа LocalDateTime в строку.
       Результат вы видите на экране.

      В метод format() можно передать практически любой объект из Date Time API.

      Статический метод ofPattern() тоже очень простой: принимает в качестве параметра строку-шаблон, а возвращает
      объект типа DateTimeFormatter. Самое интересное находится внутри шаблона.

      2. Шаблон форматирования
      Строка, переданная в качестве паттерна, используется как шаблон при выводе информации. MM заменяется на номер
      месяца, dd — на день месяца, yy на номер года. Регистр букв имеет значение.

      Полная таблица преобразования времени выглядит так:

      Буква	Обозначение
      y	Год (Year)
      M	Месяц (Month)
      d	День (day)
      H	Часы (Hours)
      m	Минуты (Minutes)
      s	Секунды (Seconds)
      S	Тысячные доли секунды
      n	Наносекунды.
      В принципе запомнить не сложно.

      А почему тогда в шаблоне из примера буквы MM, dd и yy были написаны по два раза? А вот тут уже становится
      интереснее.

      Общая идея

      Количество букв влияет на длину текста. Чем большое букв, тем длиннее будет текст.

      Если буква H указывается один раз, то 9 часов будут отображаться как 9, а если буква H указывается два раза
      подряд, то 9 часов будут отображаться как 09.

      Если буква y указывается 2 раза подряд, то год пишется 2 цифрами, если 4 раза подряд — 4-мя цифрами.

      Если буква M указывается 2 раза подряд, то пишется номер месяца, если 3 раза подряд, то название месяца
      (3 первых буквы), если 4 раза подряд, то полное название месяца.

      Пример:

      Код	Вывод на экран
      DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MMMM-dd-yyyy");
      String text = dtf.format( LocalDateTime.now() );
      System.out.println(text);


      February-22-2019
      3. Полная таблица шаблонов
      Полная таблица достаточно большая и очень интересная:

      Шаблон	       Вариации шаблона	                     Пример	                       Описание
      y                   yy,yyyy	                                19; 2019	                    Год
      M/L	            M, MM, MMM, MMMM, MMMMM	                1; 01; Jan; January; J	        Месяц
      d	                     d,  dd	                                    9; 09	                         День
      H	                  H,               HH	                                                2; 02	Часы
      m               m, mm	3; 03	Минуты
      s	         s, ss	5; 05	Секунды
      S	            S, SS, SSS, ...	1; 12; 123	Тысячные доли секунды
      n	             n	123456789	Наносекунды
      G           	G, GGGG, GGGGG	AD; Anno Domini; A;	Эра
      Q/q	              q, qq, qqq, qqqq	3; 03; Q3; 3rd quarter	Квартал
      w	                        w	13	Неделя года
      W	                    W	3	Неделя месяца
      E	                EEE, EEEE, EEEEE	Mon; Monday; M	День недели
      e/c	          e, ee, eee, eeee, eeeee	1; 01; Mon; Monday; M	День недели
      a	a	               PM	AM или PM
      h          	h	                    12	Время 1-12 часов.
      V	VV	                Europe/Helsinki	Временная зона
      z	z zzzz	               EET;  Eastern European Standard Time	Временная зона
      O	O OOOO                        	GMT+2;  GMT+02:00	Временная зона


      4. Парсинг времени
      Класс DateTimeFormatter интересен еще и тем, что может не только преобразовывать дату и время в строку по
       заданному шаблону, но и выполнять обратную операцию!

      Анализ и разбор строки называют парсингом от слова parse.

      Вот как выглядит такой процесс:

      Код	Вывод на экран
      DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MMMM-dd-yyyy");
      LocalDate date = LocalDate.parse("February-23-2019", dtf);
      System.out.println(date);


      February-23-2019
      Сначала мы создаем объект DateTimeFormatter и задаем в нем шаблон парсинга.

      Затем вызываем метод LocalDate.parse() или LocalTime.parse() или LocalDateTime.parse() и передаем в этот метод
      строку, которую нужно распарсить и объект DateTimeFormatter, который понимает, как и по какому шаблону нужно
       распарсивать переданный текст.

      Еще один пример: на этот раз с парсингом времени.

      Код	Вывод на экран
      DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm:ss");
      LocalTime time = LocalTime.parse("23:59:59", dtf);
      System.out.println(time);


      23:59:59





