отвечает за работу с текстом. Строки символы и т д.
Класс String — это immutable класс. Все объекты типа String — неизменяемые, что, однако, не мешает нам с ними работать.
Ссылочный тип. Создает объекты.
Разработчики Java заметили, что в большинстве своем строки внутри программ существуют в неизменяемом виде, но иногда их
 все-таки изменяют. Очень неприятно, когда вы создали строку, сохранили в нее что-то важное, передали в чужой метод,
 а он ее поменял. Чтобы такого не происходило, разработчики решили создать два вида строк – изменяемую и неизменяемую.

— Класс String стал отвечать за неизменяемую строку, а класс StringBuilder – за изменяемую.
 Объекты этих классов легко преобразуются друг в друга.
  В большинстве случаев разработчикам программ на Java достаточно просто String,
   что показывает, что проектировщики Java были правы.

— А как же такой пример? Разве тут строка не изменяется?

String s = "cat";
s = s + "-" + s;
— Нет. Тут есть два объекта String: «cat»и «cat-cat». Второй создается на основе первого, но первый объект не меняется.
 На самом деле тут все еще интереснее. Вот какой код сгенерирует компилятор, когда будет компилировать твой пример:

String s = "cat";
StringBuilder s2 = new StringBuilder(s);
s2.append("-");
s2.append(s);
s = s2.toString();


методы класса String, среди которых можно выделить следующие:

concat(): объединяет строки
valueOf(): преобразует объект в строковый вид
join(): соединяет строки с учетом разделителя
сompare(): сравнивает две строки
charAt(): возвращает символ строки по индексу
getChars(): возвращает группу символов
equals(): сравнивает строки с учетом регистра
equalsIgnoreCase(): сравнивает строки без учета регистра
regionMatches(): сравнивает подстроки в строках
indexOf(): находит индекс первого вхождения подстроки в строку
lastIndexOf(): находит индекс последнего вхождения подстроки в строку

startsWith(): определяет, начинается ли строка с подстроки
endsWith(): определяет, заканчивается ли строка на определенную подстроку
replace(): заменяет в строке одну подстроку на другую
trim(): удаляет начальные и конечные пробелы
substring(): возвращает подстроку, начиная с определенного индекса до конца или до определенного индекса
toLowerCase(): переводит все символы строки в нижний регистр
toUpperCase(): переводит все символы строки в верхний регистр


Как получить подстроку (или часть строки)?

Из поставленного вопроса ты уже, вероятно, понял, что подстрока – это просто часть строки.
 Знаешь, какие действия над строками самые популярные?
  Первое — склеивание нескольких строк (конкатенация), ты уже с ней сталкивался неоднократно.
  И второе — получение подстроки из строки.

Для этого в Java есть метод substring. Он возвращает часть строки. Существует два варианта этого метода.

Первый возвращает подстроку, заданную начальным и конечным номерами символов.
Обрати внимание, первый символ при этом входит в подстроку, а последний — нет!
То есть, если мы передаем номера (1,3) — с первого по третий, то в подстроке окажутся только первый и второй символы.

Во втором варианте методы мы указываем только начальный индекс подстроки
и он возвращает подстроку от этого индекса до конца строки.


String substring(int beginIndex, int endIndex)


String s = "Good news everyone!";
s = s.substring(1,6);
Результат:

s == "ood n";

String substring(int beginIndex)


String s = "Good news everyone!";
s = s.substring(1);
Результат:

s == "ood news everyone!";

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Как найти нужную подстроку в строке?

Методы indexOf, lastIndexOf позволяют искать строки в строках. Есть 4 вида таких методов:

Метод indexOf ищет в нашей строке указанную строку.
Он может искать ее с начала строки или начиная с какого-то номера (второй метод).
Если строка найдена – метод возвращает номер ее первого символа, если не найдена — возвращает -1

int indexOf(String str)

String s = "Good news everyone!";
int index = s.indexOf("ne");
Результат:
index == 5


int indexOf(String str, int from)

String s = "Good news everyone!";
int index = s.indexOf("ne", 7);
Результат:
index == 16

Метод lastIndexOf ищет указанную строку в нашей строке с конца!
Он может искать ее с самого конца строки или начиная с какого-то номера (второй метод).
Если строка найдена – метод возвращает номер ее первого символа, если не найдена — возвращает -1.

int lastIndexOf(String str)

String s = "Good news everyone!";
int index = s.lastIndexOf("ne");
Результат:
index == 16


int lastIndexOf(String str, int from)

String s = "Good news everyone!";
int index = s.lastIndexOf("ne", 15);
Результат:
index == 5

9) Как заменить часть строки на другую?

Для этого есть три метода.

Метод replace заменяет все вхождения определенного символа на другой.

Метод replaceAll заменяет все вхождения одной подстроки на другую.

Метод replaceFirst заменяет первое вхождение переданной подстроки на заданную подстроку.

String replace(char oldChar, char newChar)

String s = "Good news everyone!";
String s2 = s.replace ('o', 'a');
Результат:
s2 == "Gaad news everyane!";

String replaceAll(String regex, String replacement)

String s = "Good news everyone!";
String s2 = s.replaceAll("ne", "_");
Результат:
s2 == "Good _ws everyo_!";
String replaceFirst(String regex, String replacement)

String s = "Good news everyone!";
String s2 = s.replaceFirst("ne", "_");
Результат:
s2 == "Good _ws everyone!";

Но тут нужно быть аккуратным.
В двух последних методах (replaceAll&replaceFirst) в качестве строки, которую мы ищем,
передается не просто строка, а регулярное выражение.


String.format

String text = String.format("User = {name: %s, age: %d years, friend: %s, weight: %d kg.}",
user.getName(), user.getAge(), user.getFriends().get(0), user.getExtraInformation().getWeight())

System.out.println(text);

В метод String.format первым параметром передается строка-шаблон, в которой, на местах,
 в которые мы хотим подставить значения, стоят специальные символы: %s, %d.

После строки-шаблона передаются параметры, значения которых и будут подставлены на место символов %s, %d.

Если нужно подставить строку мы пишем %s, если число — %d.

Вот тебе пример попроще:

Пример
String s = String.format("a = %d, b = %d, c = %d", 1, 4, 3);
Результат:
s будет равна «a = 1, b = 4, c = 3»


Обозначение	Тип
%s	String
%d	целое число: int, long, …
%f	вещественное число: float, double
%b	boolean
%c	char
%t	Date
%%	Символ %

int a = -1, b = 4, c = 3;
String template;
 if (a < 0)
  template = "Warning! a = %d, b = %d, c = %d";
 else
  template = "a = %d, b = %d, c = %d";

System.out.println(String.format(template, a, b, c) );

чтобы строку разбить на слова и затем слова записать в массив, можно воспользоваться такой конструкцией
 String info=" fdsgfdsg dsfdf sdf sdf sdfdfsd ";
             String []arrayStr=info.split(" ");
используется разделение по какому то регулярному выразнеию. в данном случае по пробелу.
Можно по запятой или по иному символу или логике регулярного выражения.

