У наследования есть две стороны. Сторона программирования и сторона реальной жизни.
С точки зрения программирования, наследование – это специальное отношение между двумя классами.
Но гораздо интереснее, что же такое наследование с точки зрения реальной жизни.

Если бы нам понадобилось что-то создать в реальной жизни, то у нас есть два решения:

1) создать нужную нам вещь с нуля, потратив кучу времени и сил.

2) создать нужную нам вещь на основе уже существующей.

Наиболее оптимальная стратегия выглядит так: берем существующее хорошее решение, немного его дорабатываем,
подгоняем под свои нужды и используем.

В программировании тоже есть возможность создавать один класс на основе другого.
Новый класс становится потомком (наследником) уже существующего.
Это очень выгодно, когда есть класс, который содержит 80%-90% нужных нам данных и методов.
Мы просто объявляем подходящий класс родителем нашего нового класса,
тогда в новом классе автоматически появляются все данные и методы класса-родителя. Правда, удобно?


class King extends ChessItem
{
void kingMove()
{
//код, решающий,
//как пойдет король
}
}

наследование (inheritance) — механизм, который позволяет описать новый класс на основе существующего (родительского).
При этом свойства и функциональность родительского класса заимствуются новым классом.

public class Car {

   private String model;
   private int maxSpeed;
   private int yearOfManufacture;

   public Car(String model, int maxSpeed, int yearOfManufacture) {
       this.model = model;
       this.maxSpeed = maxSpeed;
       this.yearOfManufacture = yearOfManufacture;
   }


public void gas() {
       //...газ
   }

public void brake() {
       //...тормоз
   }
}


public class Truck extends Car {

   public Truck(String model, int maxSpeed, int yearOfManufacture) {
       super(model, maxSpeed, yearOfManufacture);
   }
}



public class Sedan extends Car {
   public Sedan(String model, int maxSpeed, int yearOfManufacture) {
       super(model, maxSpeed, yearOfManufacture);
   }
}

Главное, не в каком классе написан метод, а какой тип (класс) объекта, у которого этот метод вызван.

— Ясно.

— Наследовать и переопределять можно только нестатические методы.
Статические методы не наследуются и, следовательно, не переопределяются.